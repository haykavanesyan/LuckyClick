// bot.js
require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');

const bot = new Telegraf(process.env.BOT_TOKEN);
const COOLDOWN = {}; // { userId: { command: timestamp } }
const ROOM_TYPES = { '100': [], '300': [], '500': [], '1000': [] };

// MongoDB connection
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('‚úÖ MongoDB connected'))
    .catch(err => console.error('‚ùå MongoDB connection error:', err));

// Schemas
const { Schema, model } = mongoose;

const userSchema = new Schema({
    userId: { type: Number, required: true, unique: true },
    balance: { type: Number, default: 0 }
});
const txSchema = new Schema({ userId: Number, txHash: String });

const User = model('User', userSchema);
const TxHash = model('TxHash', txSchema);

async function getBalance(userId) {
    if (typeof userId === 'string' && userId.startsWith('bot_')) return 0;
    const user = await User.findOne({ userId });
    return user ? user.balance : 0;
}

async function updateBalance(userId, amount) {
    if (typeof userId === 'string' && userId.startsWith('bot_')) return 0;
    const user = await User.findOneAndUpdate(
        { userId },
        { $inc: { balance: amount } },
        { new: true, upsert: true }
    );
    return user.balance;
}

async function isTxProcessed(userId, txHash) {
    const exists = await TxHash.findOne({ userId, txHash });
    if (exists) return true;
    await TxHash.create({ userId, txHash });
    return false;
}

function checkCooldown(userId, command, ctx) {
    const now = Date.now();
    if (!COOLDOWN[userId]) COOLDOWN[userId] = {};
    if (!COOLDOWN[userId][command] || now - COOLDOWN[userId][command] > 30000) {
        COOLDOWN[userId][command] = now;
        return false;
    }
    ctx.reply('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.');
    return true;
}

function createRoom(stake) {
    const list = ROOM_TYPES[stake];
    const id = `${stake}_room_${list.length + 1}`;
    const room = { id, stake: parseInt(stake), green: [], red: [], joined: [], inProgress: false, timeout: null, timerStarted: false };
    list.push(room);
    return room;
}

function findAvailableRoom(stake) {
    const list = ROOM_TYPES[stake];
    return list.find(r => !r.inProgress) || createRoom(stake);
}

function notifyRoomPlayers(room, text) {
    room.joined.forEach(id => {
        if (!id.toString().startsWith('bot_')) {
            bot.telegram.sendMessage(id, text)
        }
    });
}

async function endGame(room) {
    if (!room.inProgress) return;
    const greenCount = room.green.length;
    const redCount = room.red.length;
    const total = (greenCount + redCount) * room.stake;
    const fee = Math.floor(total * 0.2);
    const rewardPool = total - fee;

    let winners = [], winColor = '';
    if (greenCount < redCount) { winners = room.green; winColor = 'Green'; }
    else if (redCount < greenCount) { winners = room.red; winColor = 'Red'; }
    else {
        await Promise.all(room.green.concat(room.red)
            .filter(id => !id.toString().startsWith('bot_'))
            .map(id => updateBalance(id, room.stake)));
        notifyRoomPlayers(room, `[${room.id}] –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.`);
        return resetRoom(room);
    }

    const reward = Math.floor(rewardPool / (winners.length || 1));
    await Promise.all(winners
        .filter(id => !id.toString().startsWith('bot_'))
        .map(id => updateBalance(id, reward)));
    notifyRoomPlayers(room, `[${room.id}] –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ ${winColor}. –í—ã–∏–≥—Ä—ã—à: ${reward} –º–æ–Ω–µ—Ç –∫–∞–∂–¥–æ–º—É. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${winners.filter(id => !id.toString().startsWith('bot_')).length}`);
    resetRoom(room);
}

function resetRoom(room) {
    room.green = [];
    room.red = [];
    room.joined.forEach(id => {
        if (!id.toString().startsWith('bot_')) {
            bot.telegram.sendMessage(id, `–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É [${room.id}].`);
        }
    });
    room.joined = [];
    room.inProgress = false;
    room.timeout = null;
    room.timerStarted = false;
}

// –ë–æ—Ç
bot.start(async (ctx) => {
    const userId = ctx.from.id;

    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –±–∞–ª–∞–Ω—Å–æ–º 0
    const exists = await User.exists({ userId });
    if (!exists) {
        await User.create({ userId, balance: 100 });
    }

    ctx.reply(`
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LuckyClick!
üéØ –í—ã–±–∏—Ä–∞–π —Å—Ç–æ—Ä–æ–Ω—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ TON.
üí∞ 1 TON = 1000 –º–æ–Ω–µ—Ç
üöÄ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –í—ã–±–æ—Ä ‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç!
    `,
        Markup.keyboard([
            ['üü¢ –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É', 'üí∞ –ë–∞–ª–∞–Ω—Å'],
            ['‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'üì§ –í—ã–≤–µ—Å—Ç–∏'],
            ['üìú –ü—Ä–∞–≤–∏–ª–∞', '‚öôÔ∏è –ü–æ–º–æ—â—å']
        ]).resize()
    );

    ctx.reply(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –º–æ–Ω–µ—Ç –∑–∞ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥.`);
});

bot.hears('‚öôÔ∏è –ü–æ–º–æ—â—å', (ctx) => {
    ctx.reply(
        `üìò –ü–æ–º–æ—â—å –ø–æ LuckyClick:

/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
‚öôÔ∏è –ü–æ–º–æ—à—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
üí∞ –ë–∞–ª–∞–Ω—Å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å
‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
üì§ –í—ã–≤–µ—Å—Ç–∏ ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –Ω–∞ TON –∫–æ—à–µ–ª—ë–∫
üü¢ –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ TON –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /checkton ‚Äî –º–æ–Ω–µ—Ç—ã –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
üì§ –í—ã–≤–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /withdraw –°–£–ú–ú–ê TON_–ê–î–†–ï–°. –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

1 TON = 1000 –º–æ–Ω–µ—Ç
–í—ã–∏–≥—Ä—ã—à–∏ –¥–µ–ª—è—Ç—Å—è –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø–æ–±–µ–¥–∏–≤—à–µ–π –∫–æ–º–∞–Ω–¥—ã.`
    );
});

bot.hears('üìú –ü—Ä–∞–≤–∏–ª–∞', (ctx) => {
    ctx.reply(
        `üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:

1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É —Å–æ —Å—Ç–∞–≤–∫–æ–π: 100, 300, 500 –∏–ª–∏ 1000 –º–æ–Ω–µ—Ç.
        
2. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å—Ç–æ—Ä–æ–Ω ‚Äî –∑–µ–ª—ë–Ω—É—é –∏–ª–∏ –∫—Ä–∞—Å–Ω—É—é.
        
3. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ –º–∏–Ω–∏–º—É–º 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞.
        
4. –ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ–±–µ–¥–∏–≤—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞:
 ‚Äî —Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª–∞ –º–µ–Ω—å—à–µ –∏–≥—Ä–æ–∫–æ–≤
        
5. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –¥–µ–ª—è—Ç –æ–±—â–∏–π –ø—Ä–∏–∑ (–∑–∞ –≤—ã—á–µ—Ç–æ–º 20% –∫–æ–º–∏—Å—Å–∏–∏).
        
6. –í —Å–ª—É—á–∞–µ –Ω–∏—á—å–∏ ‚Äî –º–æ–Ω–µ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.`
    );
});

bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', async (ctx) => {
    const balance = await getBalance(ctx.from.id);
    ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç (1 TON = 1000 –º–æ–Ω–µ—Ç)`);
});

bot.hears('üü¢ –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É', (ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã:',
        Markup.inlineKeyboard([
            [Markup.button.callback('100 –º–æ–Ω–µ—Ç', 'join_100')],
            [Markup.button.callback('300 –º–æ–Ω–µ—Ç', 'join_300')],
            [Markup.button.callback('500 –º–æ–Ω–µ—Ç', 'join_500')],
            [Markup.button.callback('1000 –º–æ–Ω–µ—Ç', 'join_1000')]
        ])
    );
});

['100', '300', '500', '1000'].forEach(stake => {
    bot.action(`join_${stake}`, async (ctx) => {
        const userId = ctx.from.id;
        const room = findAvailableRoom(stake);
        if (room.joined.includes(userId)) return ctx.answerCbQuery('–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ');

        room.joined.push(userId);
        await bot.telegram.sendMessage(userId, `–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É [${room.id}]. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É:`,
            Markup.inlineKeyboard([
                [Markup.button.callback('üü¢ –ó–µ–ª—ë–Ω–∞—è', `bet_green_${room.id}`)],
                [Markup.button.callback('üî¥ –ö—Ä–∞—Å–Ω–∞—è', `bet_red_${room.id}`)],
                [Markup.button.callback('üö™ –í—ã–π—Ç–∏', `leave_${room.id}`)]
            ])
        );

        if (room.joined.length < 3 && !room.inProgress && !room.timerStarted) {
            await bot.telegram.sendMessage(userId, `[${room.id}] –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞.`);
            setTimeout(() => {
                if (room.joined.length < 3 && !room.inProgress) {
                    const bot1 = `bot_${Date.now()}_1`;
                    const bot2 = `bot_${Date.now()}_2`;
                    room.joined.push(bot1, bot2);
                    const color1 = Math.random() < 0.5 ? 'green' : 'red';
                    const color2 = Math.random() < 0.5 ? 'green' : 'red';
                    room[color1].push(bot1);
                    room[color2].push(bot2);
                    notifyRoomPlayers(room, `[${room.id}] –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! 30 —Å–µ–∫ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫!`);

                    room.timerStarted = true;
                    room.timeout = setTimeout(() => {
                        room.inProgress = true;
                        endGame(room);
                    }, 30000);
                }
            }, 10000);

        } else if (room.joined.length >= 3 && !room.inProgress && !room.timerStarted) {
            room.timerStarted = true;
            notifyRoomPlayers(room, `[${room.id}] –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! 30 —Å–µ–∫ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫!`);
            room.timeout = setTimeout(() => {
                room.inProgress = true;
                endGame(room);
            }, 30000);
        }
    });
});

['green', 'red'].forEach(color => {
    bot.action(new RegExp(`^bet_${color}_(.+)$`), async (ctx) => {
        const userId = ctx.from.id;
        const roomId = ctx.match[1];
        const stake = roomId.split('_')[0];
        const room = ROOM_TYPES[stake].find(r => r.id === roomId);
        if (!room || !room.joined.includes(userId)) return ctx.reply('–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.');
        if (room.inProgress) return ctx.reply('–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.');
        if (room.green.includes(userId)) return ctx.reply('–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∑–µ–ª—ë–Ω—ã–π.');
        if (room.red.includes(userId)) return ctx.reply('–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫—Ä–∞—Å–Ω—ã–π.');

        const balance = await getBalance(userId);
        if (balance < room.stake) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.');

        await updateBalance(userId, -room.stake);
        room[color].push(userId);
        ctx.reply(`[${room.id}] –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${color === 'green' ? 'üü¢ –ó–µ–ª—ë–Ω–∞—è' : 'üî¥ –ö—Ä–∞—Å–Ω–∞—è'}`);
    });
});

bot.action(/^leave_(.+)$/, (ctx) => {
    const userId = ctx.from.id;
    const roomId = ctx.match[1];
    const stake = roomId.split('_')[0];
    const room = ROOM_TYPES[stake].find(r => r.id === roomId);
    if (!room) return;
    room.joined = room.joined.filter(id => id !== userId);
    room.green = room.green.filter(id => id !== userId);
    room.red = room.red.filter(id => id !== userId);
    ctx.reply(`–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É [${room.id}].`);
});

bot.hears('‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', (ctx) => {
    ctx.reply(`–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ TON –Ω–∞ –∞–¥—Ä–µ—Å:`).then(() => {
        ctx.reply(process.env.TON_WALLET).then(() => {
            ctx.reply(`‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –æ—Ç–¥–µ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ: ${ctx.from.id}`).then(() => ctx.reply(`–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /checkton`));
        })
    })
});

bot.command('confirmwithdraw', async (ctx) => {
    if (ctx.from.id.toString() !== process.env.ADMIN_ID) return ctx.reply('‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');

    const parts = ctx.message.text.split(' ');
    if (parts.length < 4) return ctx.reply('‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /confirmwithdraw userId amount ton_address');

    const userId = parseInt(parts[1]);
    const amount = parseInt(parts[2]);
    const tonAddress = parts[3];

    if (!userId || !amount || !tonAddress) return ctx.reply('‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /confirmwithdraw 123456789 1000 EQ...');

    try {
        await bot.telegram.sendMessage(userId, `‚úÖ –ù–∞ –≤–∞—à TON-–∞–¥—Ä–µ—Å ${tonAddress} –≤—ã–≤–µ–¥–µ–Ω–æ ${amount} –º–æ–Ω–µ—Ç (‚âà ${amount / 1000} TON).`);
        ctx.reply('üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', err);
        ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
    }
});

bot.command('checkton', async (ctx) => {
    const userId = ctx.from.id;
    if (checkCooldown(userId, 'checkton', ctx)) return;

    try {
        const response = await fetch(`${process.env.TON_API}/getTransactions?address=${process.env.TON_WALLET}&limit=20`);
        const data = await response.json();
        const txs = data.result;
        const tx = txs.find(t => t.in_msg?.message?.includes(userId.toString()));
        if (!tx) return ctx.reply('–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');

        const txHash = tx.transaction_id.hash;
        const already = await isTxProcessed(userId, txHash);
        if (already) return ctx.reply('–≠—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –±—ã–ª –∑–∞—á–∏—Å–ª–µ–Ω.');

        const tonAmount = tx.in_msg.value / 1e9;
        if (tonAmount < 0.1) return ctx.reply('–ú–∏–Ω–∏–º—É–º ‚Äî 0.1 TON');

        const credit = Math.floor(tonAmount * 1000);
        const newBalance = await updateBalance(userId, credit);
        ctx.reply(`–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${credit} –º–æ–Ω–µ—Ç. –¢–µ–∫—É—â–∏–π: ${newBalance}`);
    } catch (e) {
        console.error(e);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TON.');
    }
});

bot.hears('üì§ –í—ã–≤–µ—Å—Ç–∏', (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /withdraw –°–£–ú–ú–ê TON_–ê–î–†–ï–°');
});

bot.command('withdraw', async (ctx) => {
    const userId = ctx.from.id;
    if (checkCooldown(userId, 'withdraw', ctx)) return;

    const parts = ctx.message.text.trim().split(' ');
    const amount = parseInt(parts[1]);
    const tonAddress = parts[2];

    if (!amount || !tonAddress) return ctx.reply('–§–æ—Ä–º–∞—Ç: /withdraw –°–£–ú–ú–ê TON_–ê–î–†–ï–°');

    const balance = await getBalance(userId);
    if (balance < amount) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');

    await updateBalance(userId, -amount);
    ctx.reply(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount / 1000} TON –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`);

    await bot.telegram.sendMessage(
        process.env.ADMIN_ID,
        `üì§ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:\nüë§ ${ctx.from.first_name} (${userId})\nüí∏ ${amount} –º–æ–Ω–µ—Ç (‚âà ${amount / 1000} TON)\nüìÆ ${tonAddress}`
    );
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
