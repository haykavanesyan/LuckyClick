require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const bot = new Telegraf(process.env.BOT_TOKEN);
const TON_WALLET = process.env.TON_WALLET;
const ROOM_TYPES = { '100': [], '300': [], '500': [], '1000': [] };

let balances = {};
let processedTxs = {};
const TXHASH_FILE = 'txhashes.json';
const BALANCE_FILE = 'balances.json';
const COOLDOWN = {}; // { userId: timestamp }

try {
    if (fs.existsSync(TXHASH_FILE)) {
        processedTxs = JSON.parse(fs.readFileSync(TXHASH_FILE));
    }
} catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ txhashes.json:', err);
}

try {
    if (fs.existsSync(BALANCE_FILE)) {
        balances = JSON.parse(fs.readFileSync(BALANCE_FILE));
    }
} catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ balances.json:', err);
}

function saveBalances() {
    fs.writeFileSync(BALANCE_FILE, JSON.stringify(balances, null, 2));
}

function getBalance(userId) {
    return balances[userId] || 0;
}

function createRoom(stake) {
    const list = ROOM_TYPES[stake];
    const id = `${stake}_room_${list.length + 1}`;
    const room = { id, stake: parseInt(stake), green: [], red: [], joined: [], inProgress: false, timeout: null, timerStarted: false };
    list.push(room);
    return room;
}

function findAvailableRoom(stake) {
    const list = ROOM_TYPES[stake];
    return list.find(r => !r.inProgress) || createRoom(stake);
}

function notifyRoomPlayers(room, text) {
    room.joined.forEach(id => bot.telegram.sendMessage(id, text));
}

function endGame(room, ctx) {
    if (!room.inProgress) return;
    const greenCount = room.green.length;
    const redCount = room.red.length;
    const total = (greenCount + redCount) * room.stake;
    const fee = Math.floor(total * 0.2);
    const rewardPool = total - fee;

    let winners = [], winColor = '';
    if (greenCount < redCount) { winners = room.green; winColor = 'Green'; }
    else if (redCount < greenCount) { winners = room.red; winColor = 'Red'; }
    else {
        room.green.concat(room.red).forEach(userId => {
            balances[userId] += room.stake;
        });
        saveBalances();
        notifyRoomPlayers(room, `[${room.id}] –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.`);
        return resetRoom(room);
    }

    const reward = Math.floor(rewardPool / (winners.length || 1));
    winners.forEach(userId => {
        balances[userId] += reward;
    });
    saveBalances();
    notifyRoomPlayers(room, `[${room.id}] –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ ${winColor}. –í—ã–∏–≥—Ä—ã—à: ${reward} –º–æ–Ω–µ—Ç –∫–∞–∂–¥–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${winners.length}`);
    resetRoom(room);
}

function resetRoom(room) {
    room.green = [];
    room.red = [];
    room.joined.forEach(id => bot.telegram.sendMessage(id, `–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É [${room.id}].`));
    room.joined = [];
    room.inProgress = false;
    room.timeout = null;
    room.timerStarted = false;
}

function checkCooldown(userId, command, ctx) {
    const now = Date.now();
    if (!COOLDOWN[userId]) COOLDOWN[userId] = {};
    if (!COOLDOWN[userId][command] || now - COOLDOWN[userId][command] > 60000) {
        COOLDOWN[userId][command] = now;
        return false;
    }
    ctx.reply('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.');
    return true;
}

bot.start((ctx) => {
    ctx.reply('üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LuckyClick \n1 TON = 1000 –º–æ–Ω–µ—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.keyboard([
            ['üü¢ –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É', 'üí∞ –ë–∞–ª–∞–Ω—Å'],
            ['‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'üì§ –í—ã–≤–µ—Å—Ç–∏']
        ]).resize()
    );
});

bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', (ctx) => {
    ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${getBalance(ctx.from.id)} –º–æ–Ω–µ—Ç (1 TON = 1000 –º–æ–Ω–µ—Ç)`);
});

bot.hears('üü¢ –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É', (ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã:',
        Markup.inlineKeyboard([
            [Markup.button.callback('100 –º–æ–Ω–µ—Ç', 'join_100')],
            [Markup.button.callback('300 –º–æ–Ω–µ—Ç', 'join_300')],
            [Markup.button.callback('500 –º–æ–Ω–µ—Ç', 'join_500')],
            [Markup.button.callback('1000 –º–æ–Ω–µ—Ç', 'join_1000')]
        ])
    );
});

['100', '300', '500', '1000'].forEach(stake => {
    bot.action(`join_${stake}`, (ctx) => {
        const userId = ctx.from.id;
        const room = findAvailableRoom(stake);
        if (room.joined.includes(userId)) return ctx.answerCbQuery('–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ');
        room.joined.push(userId);
        bot.telegram.sendMessage(userId, `–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É [${room.id}]. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É:`,
            Markup.inlineKeyboard([
                [Markup.button.callback('–ó–µ–ª—ë–Ω–∞—è', `bet_green_${room.id}`)],
                [Markup.button.callback('–ö—Ä–∞—Å–Ω–∞—è', `bet_red_${room.id}`)],
                [Markup.button.callback('üö™ –í—ã–π—Ç–∏', `leave_${room.id}`)]
            ])
        );
        if (room.joined.length === 1 && !room.inProgress && !room.timerStarted) {
            bot.telegram.sendMessage(userId, `[${room.id}] –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ö–æ—Ç—è –±—ã 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞.`);
        } else if (room.joined.length >= 2 && !room.inProgress && !room.timerStarted) {
            room.timerStarted = true;
            notifyRoomPlayers(room, `[${room.id}] –¢–∞–π–º–µ—Ä: 30 —Å–µ–∫ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫! –°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É.`);
            room.timeout = setTimeout(() => {
                room.inProgress = true;
                endGame(room, ctx);
            }, 30000);
        } else if (room.timerStarted) {
            const timeLeft = Math.ceil((room.timeout._idleStart + room.timeout._idleTimeout - Date.now()) / 1000);
            bot.telegram.sendMessage(userId, `[${room.id}] –ò–≥—Ä–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è! –£ –≤–∞—Å –µ—Å—Ç—å ${timeLeft} —Å–µ–∫ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É.`);
        }
    });
});

['green', 'red'].forEach(color => {
    bot.action(new RegExp(`^bet_${color}_(.+)$`), (ctx) => {
        const userId = ctx.from.id;
        const roomId = ctx.match[1];
        const stake = roomId.split('_')[0];
        const room = ROOM_TYPES[stake].find(r => r.id === roomId);
        if (!room || !room.joined.includes(userId)) return ctx.reply('–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.');
        if (room.inProgress) return ctx.reply('–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.');
        if (room.green.includes(userId)) return ctx.reply('–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∑–µ–ª—ë–Ω—ã–π. –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç.');
        if (room.red.includes(userId)) return ctx.reply('–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫—Ä–∞—Å–Ω—ã–π. –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç.');
        if (getBalance(userId) < room.stake) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏.');
        balances[userId] -= room.stake;
        room[color].push(userId);
        saveBalances();
        ctx.reply(`[${room.id}] –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${color}`);
    });
});

bot.action(/^leave_(.+)$/, (ctx) => {
    const userId = ctx.from.id;
    const roomId = ctx.match[1];
    const stake = roomId.split('_')[0];
    const room = ROOM_TYPES[stake].find(r => r.id === roomId);
    if (!room) return;
    room.joined = room.joined.filter(id => id !== userId);
    room.green = room.green.filter(id => id !== userId);
    room.red = room.red.filter(id => id !== userId);
    ctx.reply(`–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É [${room.id}].`);
});

bot.hears('‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', (ctx) => {
    ctx.reply(`–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ TON –Ω–∞ –∞–¥—Ä–µ—Å:`).then(() => {
        ctx.reply(`${TON_WALLET}`).then(() => {
            ctx.reply(`–í –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ: ${ctx.from.id}`).then(() => {
                ctx.reply(`–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /checkton`);
            })
        })
    })
});

bot.command('checkton', async (ctx) => {
    const userId = ctx.from.id;
    if (checkCooldown(userId, 'checkton', ctx)) return;

    try {
        const response = await fetch(`https://toncenter.com/api/v2/getTransactions?address=${TON_WALLET}&limit=20`, {
            headers: { 'Content-Type': 'application/json' }
        });
        const data = await response.json();
        const txs = data.result;
        const found = txs.find(tx => tx.in_msg && tx.in_msg.source && tx.in_msg.message && tx.in_msg.message.includes(userId.toString()));
        if (found) {
            const tonAmount = found.in_msg.value / 1e9;
            if (tonAmount < 0.1) return ctx.reply('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 0.1 TON');

            const txHash = found.transaction_id.hash;
            if (!processedTxs[userId]) processedTxs[userId] = [];
            if (processedTxs[userId].includes(txHash)) return ctx.reply('–≠—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –±—ã–ª –∑–∞—á–∏—Å–ª–µ–Ω —Ä–∞–Ω–µ–µ.');
            const credit = Math.floor(tonAmount * 1000);
            balances[userId] = getBalance(userId) + credit;
            saveBalances();
            processedTxs[userId].push(txHash);
            fs.writeFileSync(TXHASH_FILE, JSON.stringify(processedTxs, null, 2));
            console.log(`‚úÖ [${new Date().toISOString()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ ${credit} –º–æ–Ω–µ—Ç (‚âà ${tonAmount} TON).`);
            return ctx.reply(`–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${credit} –º–æ–Ω–µ—Ç (‚âà ${tonAmount} TON). –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balances[userId]}`);
        } else {
            return ctx.reply('–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç.');
        }
    } catch (e) {
        console.error(e);
        return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.hears('üì§ –í—ã–≤–µ—Å—Ç–∏', (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /withdraw –°–£–ú–ú–ê TON_–ê–î–†–ï–° (1 TON = 1000 –º–æ–Ω–µ—Ç)');
});

bot.command('withdraw', (ctx) => {
    const userId = ctx.from.id;
    if (checkCooldown(userId, 'withdraw', ctx)) return;

    const parts = ctx.message.text.trim().split(' ');
    const amount = parseInt(parts[1]);
    const tonAddress = parts[2];
    if (!amount || amount <= 0) return ctx.reply('‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∏ –í–∞—à TON –∞–¥—Ä–µ—Å: /withdraw –°–£–ú–ú–ê TON_–ê–î–†–ï–°');
    if (!tonAddress) return ctx.reply('‚ùó –£–∫–∞–∂–∏—Ç–µ TON –∞–¥—Ä–µ—Å: /withdraw –°–£–ú–ú–ê TON_–ê–î–†–ï–°');
    if (getBalance(userId) < amount) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
    balances[userId] -= amount;
    saveBalances();
    const log = `üì§ [${new Date().toISOString()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ ${amount} –º–æ–Ω–µ—Ç (‚âà ${amount / 1000} TON) –Ω–∞ ${tonAddress}. –û—Å—Ç–∞—Ç–æ–∫: ${balances[userId]}\n`;
    fs.appendFileSync('transactions.log', log);
    console.log(log.trim());
    ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount / 1000} TON –ø—Ä–∏–Ω—è—Ç–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ ${tonAddress} –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balances[userId]} –º–æ–Ω–µ—Ç.`);
});

bot.launch();
console.log('Bot is running...');
